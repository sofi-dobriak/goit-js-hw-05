'use strict';

//Task 1
//–°—É–º–∞ —á–∏—Å–µ–ª: –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é sumArray(numbers, callback), —è–∫–∞ –ø—Ä–∏–π–º–∞—î –º–∞—Å–∏–≤ —á–∏—Å–µ–ª numbers —Ç–∞ –∫–æ–ª–±–µ–∫ callback. –§—É–Ω–∫—Ü—ñ—è –ø–æ–≤–∏–Ω–Ω–∞ –æ–±—á–∏—Å–ª–∏—Ç–∏ —Å—É–º—É —á–∏—Å–µ–ª —É –º–∞—Å–∏–≤—ñ —Ç–∞ –ø–µ—Ä–µ–¥–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É –∫–æ–ª–±–µ–∫.

console.log('Task #1');

function sumArray(numbers, callback) {
    return callback(numbers);
}

function getSum(numbers) {
    let sum = 0;

    for (const number of numbers) {
        sum += number;
    }

    return sum;
}

// console.log(sumArray([5, 10, 15], getSum));
// console.log(sumArray([50, 10, 7], getSum));

//Task 2
//–ü–æ–¥–≤–æ—î–Ω–Ω—è —á–∏—Å–µ–ª: –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é doubleArray(numbers, callback), —è–∫–∞ –ø—Ä–∏–π–º–∞—î –º–∞—Å–∏–≤ —á–∏—Å–µ–ª numbers —Ç–∞ –∫–æ–ª–±–µ–∫ callback. –§—É–Ω–∫—Ü—ñ—è –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ–¥–≤–æ—ó—Ç–∏ –∫–æ–∂–Ω–µ —á–∏—Å–ª–æ –≤ –º–∞—Å–∏–≤—ñ —Ç–∞ –ø–µ—Ä–µ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ —É –∫–æ–ª–±–µ–∫.

console.log(' ');
console.log('Task #2');

function doubleArray(numbers, callback) {
    return callback(numbers);
}

function getDouble(numbers) {
    const doubleArray = [];

    for (let number of numbers) {
        doubleArray.push(number * 2);
    }

    return doubleArray;
}

// console.log(doubleArray([5, 10, 15], getDouble));

//Task 3
//–§—ñ–ª—å—Ç—Ä —Å–ª—ñ–≤: –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é filterWords(words, condition, callback), —è–∫–∞ –ø—Ä–∏–π–º–∞—î –º–∞—Å–∏–≤ —Ä—è–¥–∫—ñ–≤ words, —Ñ—É–Ω–∫—Ü—ñ—é condition (–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä—è–¥–∫–∞) —Ç–∞ –∫–æ–ª–±–µ–∫ callback. –§—É–Ω–∫—Ü—ñ—è –ø–æ–≤–∏–Ω–Ω–∞ —Ñ—ñ–ª—å—Ç—Ä—É–≤–∞—Ç–∏ —Å–ª–æ–≤–∞ –º–∞—Å–∏–≤—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –ø–µ—Ä–µ–¥–∞–Ω–æ—ó —É–º–æ–≤–∏ —Ç–∞ –ø–µ—Ä–µ–¥–∞—Ç–∏ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–∏–π –º–∞—Å–∏–≤ —É –∫–æ–ª–±–µ–∫.

console.log(' ');
console.log('Task #3');

function filterWords(words, condition, callback) {
    const filterWords = [];

    for (const word of words) {
        if (condition(word)) {
            filterWords.push(word);
        }
    }
    return callback(filterWords);
}

function isLongString(word) {
    return word.length > 4;
}

function logWords(filterWords) {
    return filterWords;
}

const words = ['short', 'supercalifragilisticexpialidocious', 'longword', 'tiny', 'elephant'];

// console.log(filterWords(words, isLongString, logWords));

//Task 4
//–ö–∞–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä—è–¥–∫—ñ–≤: –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é capitalizeStrings(strings, callback), —è–∫–∞ –ø—Ä–∏–π–º–∞—î –º–∞—Å–∏–≤ —Ä—è–¥–∫—ñ–≤ strings —Ç–∞ –∫–æ–ª–±–µ–∫ callback. –§—É–Ω–∫—Ü—ñ—è –ø–æ–≤–∏–Ω–Ω–∞ –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ –≤—Å—ñ —Ä—è–¥–∫–∏ –≤ –º–∞—Å–∏–≤—ñ, —Ä–æ–±–ª—è—á–∏ –ø–µ—Ä—à—É –ª—ñ—Ç–µ—Ä—É –∫–æ–∂–Ω–æ–≥–æ —Ä—è–¥–∫–∞ –≤–µ–ª–∏–∫–æ—ó, —ñ –ø–µ—Ä–µ–¥–∞—Ç–∏ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–∏–π –º–∞—Å–∏–≤ –≤ –∫–æ–ª–±–µ–∫.

console.log(' ');
console.log('Task #4');

function capitalizeStrings(strings, callback) {
    const result = [];

    for (let i = 0; i < strings.length; i++) {
        result.push(strings[i].charAt(0).toUpperCase() + strings[i].slice(1));
    }

    return callback(result);
}

function logArray(array) {
    return array;
}

const stringsArray = ['short', 'longword', 'tiny', 'elephant'];
// console.log(capitalizeStrings(stringsArray, logArray));

//Task 5
//–°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —á–∏—Å–µ–ª: –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é sortNumbers(numbers, callback), —è–∫–∞ –ø—Ä–∏–π–º–∞—î –º–∞—Å–∏–≤ —á–∏—Å–µ–ª numbers —Ç–∞ –∫–æ–ª–±–µ–∫ callback. –§—É–Ω–∫—Ü—ñ—è –ø–æ–≤–∏–Ω–Ω–∞ –≤—ñ–¥—Å–æ—Ä—Ç—É–≤–∞—Ç–∏ —á–∏—Å–ª–∞ –≤ –º–∞—Å–∏–≤—ñ –∑–∞ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è–º —Ç–∞ –ø–µ—Ä–µ–¥–∞—Ç–∏ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π –º–∞—Å–∏–≤ —É –∫–æ–ª–±–µ–∫.

console.log(' ');
console.log('Task #5');

function sortNumbers(numbers, callback) {
    const result = numbers.toSorted((a, b) => a - b);
    return callback(result);
}

function logNumbers(numbers) {
    return numbers;
}

// console.log(sortNumbers([5, 7, 13, 25, 33, 8], logNumbers));

//Task 6
//–ü–æ—à—É–∫ –º–∞–∫—Å–∏–º—É–º—É: –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é findMax(numbers, callback), —è–∫–∞ –ø—Ä–∏–π–º–∞—î –º–∞—Å–∏–≤ —á–∏—Å–µ–ª numbers —Ç–∞ –∫–æ–ª–±–µ–∫ callback. –§—É–Ω–∫—Ü—ñ—è –ø–æ–≤–∏–Ω–Ω–∞ –∑–Ω–∞–π—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–µ —á–∏—Å–ª–æ –≤ –º–∞—Å–∏–≤—ñ —Ç–∞ –ø–µ—Ä–µ–¥–∞—Ç–∏ –π–æ–≥–æ –≤ –∫–æ–ª–±–µ–∫.

console.log(' ');
console.log('Task #6');

function findMax(numbers, callback) {
    const maxNumber = Math.max(...numbers);
    return callback(maxNumber);
}

function logMaxNumber(number) {
    return number;
}

// console.log(findMax([5, 7, 13, 25, 33, 8], logMaxNumber));

//Task 7
//–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–∞—Ä–Ω—ñ—Å—Ç—å: –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é checkEven(numbers, callback), —è–∫–∞ –ø—Ä–∏–π–º–∞—î –º–∞—Å–∏–≤ —á–∏—Å–µ–ª numbers —Ç–∞ –∫–æ–ª–±–µ–∫ callback. –§—É–Ω–∫—Ü—ñ—è –ø–æ–≤–∏–Ω–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ –≤—Å—ñ —á–∏—Å–ª–∞ –≤ –º–∞—Å–∏–≤—ñ –ø–∞—Ä–Ω—ñ, —ñ –ø–µ—Ä–µ–¥–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ–ª–±–µ–∫.

console.log(' ');
console.log('Task #7');

function checkEven(numbers, callback) {
    for (const number of numbers) {
        if (number % 2 === 0) {
            return callback(true);
        }
    }

    return callback(false);
}

function logEvenArray(evenArray) {
    return evenArray;
}

// console.log(checkEven([5, 7, 13, 25, 33], logEvenArray));
// console.log(checkEven([2, 4, 6, 8], logEvenArray));

//Task 8
//–û–±'—î–¥–Ω–∞–Ω–Ω—è —Ä—è–¥–∫—ñ–≤: –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é concatStrings(strings, separator, callback), —è–∫–∞ –ø—Ä–∏–π–º–∞—î –º–∞—Å–∏–≤ —Ä—è–¥–∫—ñ–≤ strings, —Ä—è–¥–æ–∫ separator —Ç–∞ –∫–æ–ª–±–µ–∫ callback. –§—É–Ω–∫—Ü—ñ—è –ø–æ–≤–∏–Ω–Ω–∞ –æ–±'—î–¥–Ω–∞—Ç–∏ —Ä—è–¥–∫–∏ –∑ –º–∞—Å–∏–≤—É, —Ä–æ–∑–¥—ñ–ª—è—é—á–∏ —ó—Ö –ø–µ—Ä–µ–¥–∞–Ω–∏–º —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫–æ–º, —ñ –ø–µ—Ä–µ–¥–∞—Ç–∏ —Ä—è–¥–æ–∫, —â–æ –≤–∏–π—à–æ–≤, –≤ –∫–æ–ª–±–µ–∫.

console.log(' ');
console.log('Task #8');

function concatStrings(strings, separator, callback) {
    const joinString = strings.join(separator);
    return callback(joinString);
}

function logJoinStrings(joinString) {
    return joinString;
}

// console.log(concatStrings(['short', 'longword', 'tiny', 'elephant'], '-', logJoinStrings));

//Task 9
//–ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤ —á–∏—Å–ª–∞: –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é parseNumbers(strings, callback), —è–∫–∞ –ø—Ä–∏–π–º–∞—î –º–∞—Å–∏–≤ —Ä—è–¥–∫—ñ–≤ strings —Ç–∞ –∫–æ–ª–±–µ–∫ callback. –§—É–Ω–∫—Ü—ñ—è –ø–æ–≤–∏–Ω–Ω–∞ –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ–∂–µ–Ω —Ä—è–¥–æ–∫ –∑ –º–∞—Å–∏–≤—É –Ω–∞ —á–∏—Å–ª–æ —ñ –ø–µ—Ä–µ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ —á–∏—Å–µ–ª –≤ –∫–æ–ª–±–µ–∫.

console.log(' ');
console.log('Task #9');

function parseNumbers(strings, callback) {
    const numbersArray = [];

    for (const string of strings) {
        numbersArray.push(Number(string));
    }

    return callback(numbersArray);
}
function logNumbersArray(numbersArray) {
    return numbersArray;
}

// console.log(parseNumbers(['5', '250', '34', '97'], logNumbersArray));

//Task 10
//–ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Å–∏–º–≤–æ–ª—ñ–≤: –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é countCharacters(strings, callback), —è–∫–∞ –ø—Ä–∏–π–º–∞—î –º–∞—Å–∏–≤ —Ä—è–¥–∫—ñ–≤ strings —Ç–∞ –∫–æ–ª–±–µ–∫ callback. –§—É–Ω–∫—Ü—ñ—è –ø–æ–≤–∏–Ω–Ω–∞ –ø—ñ–¥—Ä–∞—Ö—É–≤–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–∏–º–≤–æ–ª—ñ–≤ —É –≤—Å—ñ—Ö —Ä—è–¥–∫–∞—Ö –º–∞—Å–∏–≤—É —Ç–∞ –ø–µ—Ä–µ–¥–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É –∫–æ–ª–±–µ–∫.

console.log(' ');
console.log('Task #10');

function countCharacters(strings, callback) {
    let sum = 0;

    for (const string of strings) {
        sum += Number(string.length);
    }

    return callback(sum);
}

function logTotalCountSymbols(sum) {
    return sum;
}

// console.log(countCharacters(['short', 'longword', 'tiny', 'elephant'], logTotalCountSymbols));

//Task 11
/*–ù–∞–ø–∏—à—ñ—Ç—å —Ç–∞–∫—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:

createProduct(obj, callback) - –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç —Ç–æ–≤–∞—Ä—É –±–µ–∑ id, –∞ —Ç–∞–∫–æ–∂ –∫–æ–ª–±–µ–∫. –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç —Ç–æ–≤–∞—Ä—É, –¥–æ–¥–∞—é—á–∏ –π–æ–º—É —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —É –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å id —ñ –≤–∏–∫–ª–∏–∫–∞—î –∫–æ–ª–±–µ–∫, –ø–µ—Ä–µ–¥–∞—é—á–∏ –π–æ–º—É —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –æ–±'—î–∫—Ç.
logProduct(product) - –∫–æ–ª–±–µ–∫, —â–æ –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç –ø—Ä–æ–¥—É–∫—Ç—É —ñ –ª–æ–≥—ñ—Ä—É—î –π–æ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å
logTotalPrice(product) - –∫–æ–ª–±–µ–∫, —â–æ –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç –ø—Ä–æ–¥—É–∫—Ç—É —ñ –ª–æ–≥—ñ—Ä—É—î –∑–∞–≥–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É –≤ –∫–æ–Ω—Å–æ–ª—å*/

console.log(' ');
console.log('Task #11');

// function createProduct(obj, callback) {
//     const product = {
//         id: Date.now(), //—è–∫ –≤–∞—Ä—ñ–∞–Ω—Ç —Ç–∞–∫–∏–π id
//         ...obj,
//     };

//     return callback(product);
// }

// function logProduct(product) {
//     console.log(product);
// }

// function logTotalPrice(product) {
//     const totalPrice = product.price * product.quantity;
//     console.log(`Total price: ${totalPrice}$`);
// }

// createProduct({ name: 'üçé', price: 30, quantity: 3 }, logProduct);
// createProduct({ name: 'üçã', price: 20, quantity: 5 }, logTotalPrice);

//Task 12
/*–î–æ–¥–∞–π—Ç–µ –æ–±'—î–∫—Ç—É account –º–µ—Ç–æ–¥–∏ withdraw(amount, onSuccess, onError) —ñ deposit(amount, onSuccess, onError), –¥–µ –ø–µ—Ä—à–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä - —Ü–µ —Å—É–º–∞ –æ–ø–µ—Ä–∞—Ü—ñ—ó, –∞ –¥—Ä—É–≥–∏–π —ñ —Ç—Ä–µ—Ç—ñ–π - –∫–æ–ª–±–µ–∫–∏.

–ú–µ—Ç–æ–¥ withdraw –≤–∏–∫–ª–∏–∫–∞—î onError, —è–∫—â–æ amount –±—ñ–ª—å—à–µ TRANSACTION_LIMIT –∞–±–æ this.balance, —ñ onSuccess –≤ —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É.

–ú–µ—Ç–æ–¥ deposit –≤–∏–∫–ª–∏–∫–∞—î onError, —è–∫—â–æ amount –±—ñ–ª—å—à–∞ –∑–∞ TRANSACTION_LIMIT –∞–±–æ –º–µ–Ω—à–∞ —á–∏ –¥–æ—Ä—ñ–≤–Ω—é—î –Ω—É–ª—é, —ñ onSuccess –≤ —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É.*/

console.log(' ');
console.log('Task #12');

// const TRANSACTION_LIMIT = 1000;

// const account = {
//     username: 'Jacob',
//     balance: 400,

//     withdraw(amount, onSuccess, onError) {
//         if (amount > TRANSACTION_LIMIT || amount > this.balance) {
//             return onError(`Withdrawal is not possible`);
//         } else {
//             onSuccess('Withdrawal is success');
//         }
//     },

//     deposit(amount, onSuccess, onError) {
//         if (amount > TRANSACTION_LIMIT || amount <= 0) {
//             return onError(`Deposit is not possible`);
//         } else {
//             return onSuccess('Deposit is success');
//         }
//     },
// };

// function handleSuccess(message) {
//     console.log(`‚úÖ Success! ${message}`);
// }
// function handleError(message) {
//     console.log(`‚ùå Error! ${message}`);
// }

// account.withdraw(2000, handleSuccess, handleError);
// account.withdraw(600, handleSuccess, handleError);
// account.withdraw(300, handleSuccess, handleError);
// account.deposit(1700, handleSuccess, handleError);
// account.deposit(0, handleSuccess, handleError);
// account.deposit(-600, handleSuccess, handleError);
// account.deposit(600, handleSuccess, handleError);

//Task 13
/*–ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é each(array, callback), —è–∫–∞ –ø–µ—Ä—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –æ—á—ñ–∫—É—î –Ω–∞ –º–∞—Å–∏–≤, –∞ –¥—Ä—É–≥–∏–º - –Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –∑–∞—Å—Ç–æ—Å—É—î—Ç—å—Å—è –¥–æ –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É. –§—É–Ω–∫—Ü—ñ—è each –º–∞—î –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤, –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ —è–∫–æ–≥–æ –±—É–¥—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤–∏–∫–ª–∏–∫—É –∫–æ–ª–ª–±–µ–∫–∞.*/

console.log(' ');
console.log('Task #13');

// function each(array, callback) {
//     const result = [];

//     for (const item of array) {
//         result.push(callback(item));
//     }

//     return result;
// }

// function multiply(value) {
//     return value * 2;
// }

// function subtraction(value) {
//     return value - 2;
// }

// function sqrt(value) {
//     return Math.sqrt(value);
// }

// function ceil(value) {
//     return Math.ceil(value);
// }

// function floor(value) {
//     return Math.floor(value);
// }

// console.log(each([64, 49, 36, 25, 16], multiply));
// console.log(each([64, 49, 36, 25, 16], subtraction));
// console.log(each([64, 49, 36, 25, 16], sqrt));
// console.log(each([1.5, 2.1, 16.4, 9.7, 11.3], ceil));
// console.log(each([1.5, 2.1, 16.4, 9.7, 11.3], floor));

// console.log(
//   each([1.5, 2.1, 16.4, 9.7, 11.3], function (value) {
//     return Math.floor(value);
//   }) –ø—Ä–∏–∫–ª–∞–ª —ñ–Ω–ª–∞–π–Ω–æ–≤–æ—ó –∫–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó

//Task 14
/*–í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó.*/

console.log(' ');
console.log('Task #14');

const createProduct = (partialProduct, callback) => {
    const product = { id: Date.now(), ...partialProduct };
    callback(product);
};

const logProduct2 = product => console.log(product);

const logTotalPrice2 = product => console.log(product.price * product.quantity);

createProduct({ name: 'üçé', price: 30, quantity: 3 }, logProduct2);
createProduct({ name: 'üçã', price: 20, quantity: 5 }, logTotalPrice2);

//Task 15
/*–í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó.*/

console.log(' ');
console.log('Task #15');

const TRANSACTION_LIMIT = 1000;

const account = {
    username: 'Jacob',
    balance: 400,

    withdraw(amount, onSuccess, onError) {
        if (amount > TRANSACTION_LIMIT) {
            onError(`Amount should not exceed ${TRANSACTION_LIMIT} credits`);
        } else if (amount > this.balance) {
            onError(`Amount can't exceed account balance of ${this.balance} credits`);
        } else {
            this.balance -= amount;
            onSuccess(`Account balance: ${this.balance}`);
        }
    },

    deposit(amount, onSuccess, onError) {
        if (amount > TRANSACTION_LIMIT) {
            onError(`Amount should not exceed ${TRANSACTION_LIMIT} credits`);
        } else if (amount <= 0) {
            onError(`Amount must be more than 0 credits`);
        } else {
            this.balance += amount;
            onSuccess(`Account balance: ${this.balance}`);
        }
    },
};

const handleSuccess = message => console.log(`‚úÖ Success! ${message}`);

const handleError = message => console.log(`‚ùå Error! ${message}`);

account.withdraw(2000, handleSuccess, handleError);
account.withdraw(600, handleSuccess, handleError);
account.withdraw(300, handleSuccess, handleError);
account.deposit(1700, handleSuccess, handleError);
account.deposit(0, handleSuccess, handleError);
account.deposit(-600, handleSuccess, handleError);
account.deposit(600, handleSuccess, handleError);

//Task 16
/*–í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó.*/

console.log(' ');
console.log('Task #16');

const each = (array, callback) => {
    const newArr = [];
    for (const el of array) {
        newArr.push(callback(el));
    }
    return newArr;
};

console.log(
    each([64, 49, 36, 25, 16], value => {
        return value * 2;
    })
);
console.log(
    each([64, 49, 36, 25, 16], value => {
        return value - 10;
    })
);
console.log(
    each([64, 49, 36, 25, 16], value => {
        return Math.sqrt(value);
    })
);
console.log(
    each([1.5, 2.1, 16.4, 9.7, 11.3], value => {
        return Math.ceil(value);
    })
);
console.log(
    each([1.5, 2.1, 16.4, 9.7, 11.3], value => {
        return Math.floor(value);
    })
);

//Task 17
/*–í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –º–µ—Ç–æ–¥ forEach —ñ —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó.*/

console.log(' ');
console.log('Task #17');

const logItems = items => {
    items.forEach((item, index) => {
        console.log(`${index + 1} - ${item}`);
    });
};

logItems(['Mango', 'Poly', 'Ajax']);
logItems(['üçé', 'üçá', 'üçë', 'üçå', 'üçã']);

//Task 18
/*–í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –º–µ—Ç–æ–¥ forEach —ñ —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó.*/

console.log(' ');
console.log('Task #18');

const printContactsInfo = ({ names, phones }) => {
    const nameList = names.split(',');
    const phoneList = phones.split(',');
    // for (let i = 0; i < nameList.length; i += 1) {
    //     console.log(`${nameList[i]}: ${phoneList[i]}`);
    // }

    nameList.forEach((name, index) => {
        console.log(`${name}: ${phoneList[index]}`);
    });
};

printContactsInfo({
    names: 'Jacob,William,Solomon,Artemis',
    phones: '89001234567,89001112233,890055566377,890055566300',
});

//Task 19
/*–í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –º–µ—Ç–æ–¥ forEach —ñ —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó.*/

console.log(' ');
console.log('Task #19');

const calculateAverage = (...args) => {
    let total = 0;

    args.forEach(number => {
        total += number;
    });

    return total / args.length;
};

console.log(calculateAverage(1, 2, 3, 4)); // 2.5
console.log(calculateAverage(14, 8, 2)); // 8
console.log(calculateAverage(27, 43, 2, 8, 36)); // 23.2
